/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package logistirio;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author kmanolatos
 */
public class Login extends javax.swing.JFrame implements PropertyChangeListener {

    ProgressBarTask progressBarTask;
    ProgressBarFileTask progressBarFileTask;
    ArrayList<CustomerModel> model;
    long fileLineCount;
    File tmp;

    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordText = new javax.swing.JPasswordField();
        usernameText = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        retrievePassButton = new javax.swing.JButton();
        programmerLabel = new javax.swing.JLabel();
        programmerLogoLabel = new javax.swing.JLabel();
        changePasswordButton = new javax.swing.JButton();
        loadingBar = new javax.swing.JProgressBar();
        loadingBarLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Σύνδεση Χρήστη");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        usernameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        usernameLabel.setText("Username :");
        getContentPane().add(usernameLabel);
        usernameLabel.setBounds(50, 98, 170, 22);

        passwordLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("Password  :");
        getContentPane().add(passwordLabel);
        passwordLabel.setBounds(40, 190, 180, 22);
        getContentPane().add(passwordText);
        passwordText.setBounds(262, 189, 120, 20);

        usernameText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        getContentPane().add(usernameText);
        usernameText.setBounds(262, 102, 111, 20);

        loginButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        loginButton.setText("Login");
        loginButton.setFocusable(false);
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                loginButtonMouseReleased(evt);
            }
        });
        getContentPane().add(loginButton);
        loginButton.setBounds(480, 90, 150, 23);

        retrievePassButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        retrievePassButton.setText("Υπενθύμιση Κωδικού");
        retrievePassButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                retrievePassButtonMouseReleased(evt);
            }
        });
        getContentPane().add(retrievePassButton);
        retrievePassButton.setBounds(460, 210, 160, 30);

        programmerLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        programmerLabel.setForeground(new java.awt.Color(240, 240, 240));
        programmerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                programmerLabelMouseReleased(evt);
            }
        });
        getContentPane().add(programmerLabel);
        programmerLabel.setBounds(50, 10, 350, 80);

        programmerLogoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                programmerLogoLabelMouseReleased(evt);
            }
        });
        getContentPane().add(programmerLogoLabel);
        programmerLogoLabel.setBounds(480, 270, 100, 60);

        changePasswordButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        changePasswordButton.setText("Αλλαγή Κωδικού");
        changePasswordButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changePasswordButtonMouseReleased(evt);
            }
        });
        getContentPane().add(changePasswordButton);
        changePasswordButton.setBounds(280, 270, 180, 30);

        loadingBar.setBackground(new java.awt.Color(255, 255, 255));
        loadingBar.setStringPainted(true);
        getContentPane().add(loadingBar);
        loadingBar.setBounds(50, 270, 160, 20);

        loadingBarLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        loadingBarLabel.setText("Ενημέρωση 1/2");
        getContentPane().add(loadingBarLabel);
        loadingBarLabel.setBounds(370, 40, 220, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        getContentPane().setBackground(Color.GRAY);
        try {
            Connection conn = DriverManager.getConnection("jdbc:derby:logistiriodb;create=true");
            Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stmt.executeQuery("select *from admin");
            if (!rs.last()) {
                stmt.close();
                conn.close();
                new Register().setVisible(true);
                this.dispose();
            } else {
                stmt.close();
                conn.close();
                usernameLabel.setVisible(false);
                usernameText.setVisible(false);
                passwordLabel.setVisible(false);
                passwordText.setVisible(false);
                loginButton.setVisible(false);
                retrievePassButton.setVisible(false);
                changePasswordButton.setVisible(false);
                programmerLabel.setVisible(false);
                programmerLogoLabel.setVisible(false);
                loadingBarLabel.setVisible(false);
                loadingBar.setVisible(false);
                File dir = new File("temp");
                if (!dir.exists()) {
                    dir.mkdirs();
                    Path file = Paths.get(dir.getAbsolutePath());
                    Files.setAttribute(file, "dos:hidden", true);
                }
                tmp = new File(dir, "temp.txt");
                try {
                    if (!tmp.exists()) {
                        tmp.createNewFile();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
                }
                fileLineCount = Files.lines(Paths.get("temp/temp.txt")).count();
                if (fileLineCount > 0) {
                    usernameText.setEnabled(false);
                    passwordText.setEnabled(false);
                    loginButton.setEnabled(false);
                    retrievePassButton.setEnabled(false);
                    changePasswordButton.setEnabled(false);
                    loadingBarLabel.setVisible(true);
                    loadingBar.setVisible(true);
                    progressBarFileTask = new Login.ProgressBarFileTask();
                    progressBarFileTask.addPropertyChangeListener(this);
                    progressBarFileTask.execute();
                }
            }
            try {
                Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
            conn = DriverManager.getConnection("jdbc:derby:logistiriodb;create=true");
            Statement stmnt = conn.createStatement();
            rs = stmnt.executeQuery("select *from admin");
            while (rs.next()) {
                usernameText.setText(rs.getString(1));
                passwordText.setText(rs.getString(2));
            }
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            int w = (int) screenSize.getWidth();
            int h = (int) screenSize.getHeight();
            setSize(w * 60 / 100, h * 80 / 100);
            setLocationRelativeTo(null);
            BufferedImage img = null;
            Font currentFont = usernameLabel.getFont();
            loadingBarLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 1.2F / 100));
            loadingBarLabel.setSize(w * 60 / 100, h * 5 / 100);
            loadingBarLabel.setLocation(w * 26 / 100, h * 3 / 100);
            loadingBar.setLocation(w * 26 / 100, h * 10 / 100);
            loadingBar.setSize(w * 10 / 100, h * 4 / 100);
            usernameLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
            usernameLabel.setSize(w * 60 / 100, h * 5 / 100);
            usernameLabel.setLocation(w * -39 / 100, h * 20 / 100);
            usernameText.setLocation(w * 23 / 100, h * 21 / 100);
            usernameText.setSize(w * 15 / 100, h * 4 / 100);
            usernameText.setFont(currentFont.deriveFont(Font.PLAIN, w * 1.7F / 100));
            passwordLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
            passwordLabel.setSize(w * 60 / 100, h * 5 / 100);
            passwordLabel.setLocation(w * -39 / 100, h * 29 / 100);
            passwordText.setLocation(w * 23 / 100, h * 30 / 100);
            passwordText.setSize(w * 15 / 100, h * 4 / 100);
            passwordText.setFont(currentFont.deriveFont(Font.PLAIN, w * 1.7F / 100));
            changePasswordButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
            changePasswordButton.setLocation(w * 6 / 100, h * 42 / 100);
            changePasswordButton.setSize(w * 15 / 100, h * 6 / 100);
            loginButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
            loginButton.setLocation(w * 23 / 100, h * 42 / 100);
            loginButton.setSize(w * 15 / 100, h * 6 / 100);
            retrievePassButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
            retrievePassButton.setLocation(w * 40 / 100, h * 42 / 100);
            retrievePassButton.setSize(w * 15 / 100, h * 6 / 100);
            programmerLabel.setFont(currentFont.deriveFont(Font.PLAIN, w * 1F / 100));
            programmerLabel.setSize(w * 40 / 100, h * 10 / 100);
            programmerLabel.setLocation(w * 9 / 100, h * 60 / 100);
            programmerLabel.setText("<html><center>© Λογιστήριο Τερζούδης. All rights reserved.<br> Δημιουργήθηκε από τον <a href=\"#\">Κωνσταντίνο Μανωλάτο</a></center></html>");
            URL urlToImage = getClass().getResource("/img/programmer-logo.png");
            try {
                img = ImageIO.read(urlToImage);
            } catch (IOException e) {
                e.printStackTrace();
            }
            Image dimg = img.getScaledInstance(w * 8 / 100, h * 10 / 100, Image.SCALE_SMOOTH);
            ImageIcon imageIcon = new ImageIcon(dimg);
            programmerLogoLabel.setIcon(imageIcon);
            programmerLogoLabel.setSize(w * 8 / 100, h * 10 / 100);
            programmerLogoLabel.setLocation(w * 40 / 100, h * 58 / 100);
            usernameLabel.setVisible(true);
            usernameText.setVisible(true);
            passwordLabel.setVisible(true);
            passwordText.setVisible(true);
            loginButton.setVisible(true);
            retrievePassButton.setVisible(true);
            changePasswordButton.setVisible(true);
            programmerLabel.setVisible(true);
            programmerLogoLabel.setVisible(true);
        } catch (SQLException ex) {
            setLocationRelativeTo(null);
            JOptionPane.showMessageDialog(this,
                    "Υπάρχει ήδη ανοιχτό το πρόγραμμα!",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void loginButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseReleased
        if (loginButton.isEnabled()) {
            try {
                Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
                Connection conn = DriverManager.getConnection("jdbc:derby:logistiriodb;create=true");
                Statement stmnt = conn.createStatement();
                ResultSet rs;
                rs = stmnt.executeQuery("select *from admin");
                while (rs.next()) {
                    if (!(rs.getString(1).equals(usernameText.getText()) && rs.getString(2).equals(passwordText.getText()))) {
                        JOptionPane.showMessageDialog(this,
                                "Το Usename ή το Password είναι λάθος!",
                                "Σφάλμα",
                                JOptionPane.ERROR_MESSAGE);
                    } else {
                        loadingBar.setVisible(true);
                        usernameText.setEnabled(false);
                        passwordText.setEnabled(false);
                        loginButton.setEnabled(false);
                        retrievePassButton.setEnabled(false);
                        changePasswordButton.setEnabled(false);
                        progressBarTask = new Login.ProgressBarTask();
                        progressBarTask.addPropertyChangeListener(this);
                        progressBarTask.execute();
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Login.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Login.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginButtonMouseReleased

    private void programmerLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_programmerLabelMouseReleased
        try {
            try {
                Desktop.getDesktop().browse(new URI("https://www.linkedin.com/in/konstantinos-manolatos-b1522a143"));

            } catch (IOException ex) {
                Logger.getLogger(Login.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        }//GEN-LAST:event_programmerLabelMouseReleased

    private void retrievePassButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retrievePassButtonMouseReleased
        if (retrievePassButton.isEnabled()) {
            new ForgotPassword().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_retrievePassButtonMouseReleased

    private void changePasswordButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordButtonMouseReleased
        if (changePasswordButton.isEnabled()) {
            new ChangePassword().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_changePasswordButtonMouseReleased

    private void programmerLogoLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_programmerLogoLabelMouseReleased
        try {
            try {
                Desktop.getDesktop().browse(new URI("https://www.linkedin.com/in/konstantinos-manolatos-b1522a143"));

            } catch (IOException ex) {
                Logger.getLogger(Login.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } catch (URISyntaxException ex) {
            Logger.getLogger(Login.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_programmerLogoLabelMouseReleased

    class ProgressBarFileTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            DBExecution dbExecution = new DBExecution();
            int idUpdate = 1, i;
            FileInputStream fstream = null;
            try {
                fstream = new FileInputStream("temp/temp.txt");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
            String strLine;
            ArrayList<Long> id;
            String fileString, finalString;
            double progress = 0.0;
            double tempProgress = (100 / (double) (fileLineCount));
            String format = String.format("%f", tempProgress);
            tempProgress = Double.parseDouble(format.replace(",", "."));
            loadingBar.setValue(0);
            while ((strLine = br.readLine()) != null) {
                if (strLine.length() != 0 && !strLine.equals("Delete Completed!")) {
                    dbExecution.UpsertOrDelete("delete from customersDebtByYear where id = " + Long.valueOf(strLine));
                    dbExecution.UpsertOrDelete("delete from customersDebtAnalytical where id = " + Long.valueOf(strLine));
                    dbExecution.UpsertOrDelete("delete from customers where id = " + Long.valueOf(strLine));
                    fileString = FileUtils.readFileToString(tmp);
                    finalString = fileString.replaceAll(String.valueOf("\\b" + Long.valueOf(strLine) + "\\b"), "");
                    FileUtils.writeStringToFile(tmp, finalString);
                }
                progress = progress + tempProgress;
                loadingBar.setValue((int) progress);
            }
            FileUtils.write(tmp, "Delete Completed!");
            if (progress < 100) {
                loadingBar.setValue(100);
            }
            loadingBarLabel.setText("Ενημέρωση 2/2");
            loadingBar.setValue(0);
            id = dbExecution.SelectCustomersId("select id from customers order by id");
            if (id.size() != 0) {
                progress = 0.0;
                tempProgress = (100 / (double) (id.size()));
                format = String.format("%f", tempProgress);
                tempProgress = Double.parseDouble(format.replace(",", "."));
                for (i = 0; i < id.size(); i++) {
                    if (id.get(i) != idUpdate) {
                        dbExecution.UpsertOrDelete("update customersDebtAnalytical set id = " + idUpdate + " where id = " + id.get(i));
                        dbExecution.UpsertOrDelete("update customersDebtByYear set id = " + idUpdate + " where id = " + id.get(i));
                        dbExecution.UpsertOrDelete("update customers set id = " + idUpdate + " where id = " + id.get(i));
                    }
                    progress = progress + tempProgress;
                    loadingBar.setValue((int) progress);
                    idUpdate++;
                }
                if (progress < 100) {
                    loadingBar.setValue(100);
                }
            } else {
                loadingBar.setValue(100);
            }
            br.close();
            return null;
        }

        /*
     * Executed in event dispatching thread
         */
        @Override
        public void done() {
            try {
                success();
            } catch (IOException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    class ProgressBarTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException {
            DBExecution select = new DBExecution();
            long maxId = select.GetCustomersMaxId();
            double progress = 0.0;
            double tempProgress = 0.0;
            tempProgress = 100 / (double) (maxId);
            String format = String.format("%f", tempProgress);
            tempProgress = Double.parseDouble(format.replace(",", "."));
            loadingBar.setValue(0);
            model = new ArrayList<CustomerModel>();
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            Connection conn = DriverManager.getConnection("jdbc:derby:logistiriodb;create=true");
            Statement stmnt = conn.createStatement();
            ResultSet rs;
            rs = stmnt.executeQuery("select *from customers order by id");
            while (rs.next()) {
                CustomerModel temp = new CustomerModel();
                temp.id = rs.getLong(1);
                temp.customerName = rs.getString(2);
                temp.customerSurname = rs.getString(3);
                temp.customerHomePhone = rs.getString(4);
                temp.customerMobilePhone = rs.getString(5);
                temp.customerDebt = rs.getDouble(6);
                temp.currentYear = rs.getInt(7);
                model.add(temp);
                progress = progress + tempProgress;
                loadingBar.setValue((int) progress);
            }
            if (progress < 100) {
                loadingBar.setValue(100);
            }
            stmnt.close();
            conn.close();
            return null;
        }

        /*
     * Executed in event dispatching thread
         */
        @Override
        public void done() {
            goToMenu();
        }
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            loadingBar.setValue(progress);
        }
    }

    public void success() throws IOException {
        FileUtils.write(tmp, "");
        JOptionPane.showMessageDialog(this,
                "Η ενημέρωση έγινε με επιτυχία!");
        usernameText.setEnabled(true);
        passwordText.setEnabled(true);
        loginButton.setEnabled(true);
        retrievePassButton.setEnabled(true);
        changePasswordButton.setEnabled(true);
        loadingBarLabel.setVisible(false);
        loadingBar.setVisible(false);
    }

    public void goToMenu() {
        new Menu(model).setVisible(true);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JLabel loadingBarLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JLabel programmerLabel;
    private javax.swing.JLabel programmerLogoLabel;
    private javax.swing.JButton retrievePassButton;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables
}
