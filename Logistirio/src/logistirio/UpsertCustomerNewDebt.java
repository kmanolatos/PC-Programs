/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package logistirio;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author kmanolatos
 */
public class UpsertCustomerNewDebt extends javax.swing.JFrame {

    double totalDebt;
    String upsert;
    ArrayList<CustomerModel> model;
    CustomerModel customerModel;
    NumberFormat numberFormatter = new DecimalFormat("###,###.##");

    /**
     * Creates new form UpsertNewCustomerDebt
     */
    public UpsertCustomerNewDebt(String upsert, ArrayList<CustomerModel> model, CustomerModel customerModel) {
        this.upsert = upsert;
        this.model = model;
        this.customerModel = customerModel;
        totalDebt = customerModel.customerDebt;
        setTitle(customerModel.customerName + " " + customerModel.customerSurname + " - ΈΤΟΣ " + Calendar.getInstance().get(Calendar.YEAR));
        initComponents();
    }

    UpsertCustomerNewDebt() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerDebtText = new javax.swing.JTextField();
        customerDebtLabel = new javax.swing.JLabel();
        customerTotalDebtLabel = new javax.swing.JLabel();
        backArrowLabel = new javax.swing.JLabel();
        customerNewDebtLabel = new javax.swing.JLabel();
        upsertCustomerDebtButton = new javax.swing.JButton();
        reasonLabel = new javax.swing.JLabel();
        reasonText = new javax.swing.JTextField();
        customerTotalDebtText = new javax.swing.JLabel();
        customerNewDebtText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        customerDebtText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerDebtTextKeyReleased(evt);
            }
        });
        getContentPane().add(customerDebtText);
        customerDebtText.setBounds(190, 210, 190, 30);

        customerDebtLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerDebtLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customerDebtLabel.setText("Χρέος :");
        getContentPane().add(customerDebtLabel);
        customerDebtLabel.setBounds(110, 120, 430, 30);

        customerTotalDebtLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerTotalDebtLabel.setForeground(new java.awt.Color(204, 0, 51));
        customerTotalDebtLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customerTotalDebtLabel.setText("Συνολικό Χρέος :");
        getContentPane().add(customerTotalDebtLabel);
        customerTotalDebtLabel.setBounds(550, 20, 260, 30);

        backArrowLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backArrowLabelMouseReleased(evt);
            }
        });
        getContentPane().add(backArrowLabel);
        backArrowLabel.setBounds(410, 20, 110, 40);

        customerNewDebtLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        customerNewDebtLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customerNewDebtLabel.setText("Νέο Χρέος :");
        getContentPane().add(customerNewDebtLabel);
        customerNewDebtLabel.setBounds(530, 180, 200, 30);

        upsertCustomerDebtButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        upsertCustomerDebtButton.setText("Καταχώρηση νέου Χρέους");
        upsertCustomerDebtButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                upsertCustomerDebtButtonMouseReleased(evt);
            }
        });
        getContentPane().add(upsertCustomerDebtButton);
        upsertCustomerDebtButton.setBounds(510, 240, 200, 40);

        reasonLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        reasonLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        reasonLabel.setText("Αιτιολογία :");
        getContentPane().add(reasonLabel);
        reasonLabel.setBounds(70, 80, 480, 40);
        getContentPane().add(reasonText);
        reasonText.setBounds(510, 50, 110, 20);
        getContentPane().add(customerTotalDebtText);
        customerTotalDebtText.setBounds(90, 10, 160, 30);
        getContentPane().add(customerNewDebtText);
        customerNewDebtText.setBounds(100, 270, 70, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        getContentPane().setBackground(Color.GRAY);
        customerDebtLabel.setVisible(false);
        customerDebtText.setVisible(false);
        reasonLabel.setVisible(false);
        reasonText.setVisible(false);
        customerTotalDebtText.setVisible(false);
        customerNewDebtText.setVisible(false);
        customerTotalDebtLabel.setVisible(false);
        customerNewDebtLabel.setVisible(false);
        backArrowLabel.setVisible(false);
        upsertCustomerDebtButton.setVisible(false);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int w = (int) screenSize.getWidth();
        int h = (int) screenSize.getHeight();
        setSize(w * 50 / 100, h * 60 / 100);
        setLocationRelativeTo(null);
        BufferedImage img = null;
        setLocationRelativeTo(null);
        URL urlToImage = getClass().getResource("/img/backArrow.png");
        try {
            img = ImageIO.read(urlToImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Image dimg = img.getScaledInstance(w * 4 / 100, h * 2 / 100, Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(dimg);
        backArrowLabel.setIcon(imageIcon);
        backArrowLabel.setLocation(w * 3 / 100, h * 3 / 100);
        backArrowLabel.setSize(w * 4 / 100, h * 2 / 100);
        Font currentFont = reasonLabel.getFont();
        reasonLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        reasonLabel.setSize(w * 50 / 100, h * 5 / 100);
        reasonLabel.setLocation(w * -27 / 100, h * 24 / 100);
        reasonText.setLocation(w * 26 / 100, h * 25 / 100);
        reasonText.setSize(w * 12 / 100, h * 4 / 100);
        reasonText.setFont(currentFont.deriveFont(Font.PLAIN, w * 1.7F / 100));
        customerTotalDebtLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        customerTotalDebtLabel.setSize(w * 50 / 100, h * 5 / 100);
        customerTotalDebtLabel.setLocation(w * -27 / 100, h * 5 / 100);
        customerTotalDebtText.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        customerTotalDebtText.setLocation(w * 26 / 100, h * 5 / 100);
        customerTotalDebtText.setSize(w * 50 / 100, h * 5 / 100);
        customerTotalDebtText.setText(numberFormatter.format(customerModel.customerDebt));
        customerNewDebtLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        customerNewDebtLabel.setSize(w * 50 / 100, h * 5 / 100);
        customerNewDebtLabel.setLocation(w * -27 / 100, h * 14 / 100);
        customerNewDebtText.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        customerNewDebtText.setLocation(w * 26 / 100, h * 14 / 100);
        customerNewDebtText.setSize(w * 50 / 100, h * 5 / 100);
        customerNewDebtText.setText(numberFormatter.format(customerModel.customerDebt));
        if (upsert.equals("insert")) {
            reasonText.setText("ΓΡΑΦΕΙΟ");
            reasonText.setDisabledTextColor(Color.BLACK);
            reasonText.setEnabled(false);
        }
        customerDebtLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 2 / 100));
        customerDebtLabel.setSize(w * 50 / 100, h * 5 / 100);
        customerDebtLabel.setLocation(w * -27 / 100, h * 33 / 100);
        customerDebtText.setLocation(w * 26 / 100, h * 34 / 100);
        customerDebtText.setSize(w * 12 / 100, h * 4 / 100);
        customerDebtText.setFont(currentFont.deriveFont(Font.PLAIN, w * 1.7F / 100));
        upsertCustomerDebtButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        upsertCustomerDebtButton.setLocation(w * 17 / 100, h * 44 / 100);
        upsertCustomerDebtButton.setSize(w * 18 / 100, h * 6 / 100);
        customerDebtLabel.setVisible(true);
        customerDebtText.setVisible(true);
        reasonLabel.setVisible(true);
        reasonText.setVisible(true);
        customerTotalDebtText.setVisible(true);
        customerNewDebtText.setVisible(true);
        customerTotalDebtLabel.setVisible(true);
        customerNewDebtLabel.setVisible(true);
        backArrowLabel.setVisible(true);
        upsertCustomerDebtButton.setVisible(true);
    }//GEN-LAST:event_formWindowOpened

    private void customerDebtTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerDebtTextKeyReleased
        double customerTextDouble;
        if (customerDebtText.getText().trim().length() == 0) {
            customerNewDebtText.setText(numberFormatter.format(customerModel.customerDebt));
        } else {
            if ((evt.getKeyCode() == 8 && customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 1 && customerDebtText.getText().trim().indexOf(",") != -1) || (evt.getKeyCode() == 8 && customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 2 && customerDebtText.getText().trim().indexOf("0") == customerDebtText.getText().trim().length() - 1)) {
                customerTextDouble = Double.valueOf(customerDebtText.getText().trim().replaceAll("[.]", "").replaceAll(",", ""));
                totalDebt = customerTextDouble + customerModel.customerDebt;
                customerNewDebtText.setText(numberFormatter.format(totalDebt));
            } else {
                if (evt.getKeyCode() != 44) {
                    if (customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 1 && customerDebtText.getText().trim().indexOf(",") != -1) {
                        customerTextDouble = Double.valueOf(customerDebtText.getText().trim().replaceAll("[.]", "").replaceAll(",", ""));
                        customerDebtText.setText(numberFormatter.format(customerTextDouble));
                        totalDebt = customerTextDouble + customerModel.customerDebt;
                    } else {
                        if (!((customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 2 && evt.getKeyCode() == 48) || (customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 1 && evt.getKeyCode() == 8))) {
                            if (customerDebtText.getText().trim().indexOf(",") == customerDebtText.getText().trim().length() - 1) {
                                customerDebtText.setText(customerDebtText.getText().trim().replace(",", ""));
                            }
                            if (customerDebtText.getText().trim().length() == 0) {
                                totalDebt = customerModel.customerDebt;
                            } else {
                                customerTextDouble = Double.valueOf(customerDebtText.getText().trim().replaceAll("[.]", "").replaceAll(",", "."));
                                customerDebtText.setText(numberFormatter.format(customerTextDouble));
                                totalDebt = customerTextDouble + customerModel.customerDebt;
                            }
                        }
                    }
                    customerNewDebtText.setText(numberFormatter.format(totalDebt));
                }
            }
        }
    }//GEN-LAST:event_customerDebtTextKeyReleased

    private void backArrowLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backArrowLabelMouseReleased
        new SearchCustomer(model).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backArrowLabelMouseReleased

    private void upsertCustomerDebtButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upsertCustomerDebtButtonMouseReleased
        if (customerDebtText.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this,
                    "Πρέπει να συμπληρώσετε το πεδίο Χρέος!",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Είστε σίγουρος πως θέλετε να καταχωρήσετε τον νέο χρέος για τον πελάτη?", "Επιβεβαίωση", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                DBExecution execute = new DBExecution();
                String getCustomerDebtText = customerDebtText.getText().trim().replaceAll("[.]", "").replaceAll(",", ".");
                if (!getCustomerDebtText.contains(".")) {
                    getCustomerDebtText = getCustomerDebtText + ".00";
                } else if (getCustomerDebtText.indexOf(".") == getCustomerDebtText.length() - 2) {
                    getCustomerDebtText = getCustomerDebtText + "0";
                }
                if (upsert.equals("insert")) {
                    try {
                        execute.UpdateCustomersNewDebtByYear(totalDebt, customerModel.id);
                        int index;
                        CustomerModel temp = new CustomerModel();
                        temp.id = customerModel.id;
                        temp.customerName = customerModel.customerName;
                        temp.customerSurname = customerModel.customerSurname;
                        temp.customerHomePhone = customerModel.customerHomePhone;
                        temp.customerMobilePhone = customerModel.customerMobilePhone;
                        temp.customerDebt = totalDebt;
                        temp.currentYear = Calendar.getInstance().get(Calendar.YEAR);
                        index = (int) (customerModel.id - 1);
                        model.set(index, temp);
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη έγινε με επιτυχία!");
                        new SearchCustomer(model).setVisible(true);
                        this.dispose();
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη απέτυχε!",
                                "Σφάλμα",
                                JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(UpdateCustomerCurrentDebt.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη απέτυχε!",
                                "Σφάλμα",
                                JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(UpdateCustomerCurrentDebt.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        int index;
                        CustomerModel temp = new CustomerModel();
                        temp.id = customerModel.id;
                        temp.customerName = customerModel.customerName;
                        temp.customerSurname = customerModel.customerSurname;
                        temp.customerHomePhone = customerModel.customerHomePhone;
                        temp.customerMobilePhone = customerModel.customerMobilePhone;
                        temp.customerDebt = totalDebt;
                        temp.currentYear = customerModel.currentYear;
                        index = (int) (customerModel.id - 1);
                        model.set(index, temp);
                        execute.UpdateCustomersNewDebt(temp, Double.parseDouble(getCustomerDebtText), reasonText.getText());
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη έγινε με επιτυχία!");
                        new SearchCustomer(model).setVisible(true);
                        this.dispose();
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη απέτυχε!",
                                "Σφάλμα",
                                JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(UpdateCustomerCurrentDebt.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this,
                                "Η καταχώρηση νέου χρέους για τον πελάτη απέτυχε!",
                                "Σφάλμα",
                                JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(UpdateCustomerCurrentDebt.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_upsertCustomerDebtButtonMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpsertCustomerNewDebt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpsertCustomerNewDebt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpsertCustomerNewDebt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpsertCustomerNewDebt.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpsertCustomerNewDebt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backArrowLabel;
    private javax.swing.JLabel customerDebtLabel;
    private javax.swing.JTextField customerDebtText;
    private javax.swing.JLabel customerNewDebtLabel;
    private javax.swing.JLabel customerNewDebtText;
    private javax.swing.JLabel customerTotalDebtLabel;
    private javax.swing.JLabel customerTotalDebtText;
    private javax.swing.JLabel reasonLabel;
    private javax.swing.JTextField reasonText;
    private javax.swing.JButton upsertCustomerDebtButton;
    // End of variables declaration//GEN-END:variables
}
