/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package logistirio;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author kmanolatos
 */
public class SearchCustomer extends javax.swing.JFrame implements PropertyChangeListener {

    ProgressBarTask progressBarTask;
    DefaultTableModel tableModel;
    Vector row;
    ArrayList<CustomerModel> model;
    ArrayList<CustomerModel> searchModel;
    Robot robot;
    Timer timer;
    NumberFormat numberFormatter = new DecimalFormat("###,###.##");

    /**
     * Creates new form GetCustomerData
     */
    public SearchCustomer(ArrayList<CustomerModel> model) {
        this.model = model;
        this.searchModel = model;
        initComponents();
    }

    SearchCustomer() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchCustomerText = new javax.swing.JTextField();
        customerDataScrollPane = new javax.swing.JScrollPane();
        customerDataTable = new javax.swing.JTable();
        changeCustomerDataButton = new javax.swing.JButton();
        searchCustomerLabel = new javax.swing.JLabel();
        searchLabel = new javax.swing.JLabel();
        deleteCustomerButton = new javax.swing.JButton();
        setCustomerCreditButton = new javax.swing.JButton();
        getCustomerDeptAnalyticalButton = new javax.swing.JButton();
        backArrowLabel = new javax.swing.JLabel();
        getCustomerDeptByYearButton = new javax.swing.JButton();
        upsertCustomerDebtButton = new javax.swing.JButton();
        filterComboBox = new javax.swing.JComboBox<>();
        loadingBar = new javax.swing.JProgressBar();
        loadingBarLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Αναζήτηση και Διαχείριση Πελατών");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        searchCustomerText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCustomerTextKeyReleased(evt);
            }
        });
        getContentPane().add(searchCustomerText);
        searchCustomerText.setBounds(570, 180, 130, 40);

        customerDataTable.setBackground(new java.awt.Color(204, 204, 204));
        customerDataTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customerDataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        customerDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                customerDataTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                customerDataTableMouseExited(evt);
            }
        });
        customerDataScrollPane.setViewportView(customerDataTable);

        getContentPane().add(customerDataScrollPane);
        customerDataScrollPane.setBounds(30, 30, 430, 140);

        changeCustomerDataButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        changeCustomerDataButton.setText("Αλλαγή στοιχείων");
        changeCustomerDataButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                changeCustomerDataButtonMouseReleased(evt);
            }
        });
        getContentPane().add(changeCustomerDataButton);
        changeCustomerDataButton.setBounds(520, 60, 180, 40);

        searchCustomerLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        searchCustomerLabel.setText("Αναζήτηση :");
        getContentPane().add(searchCustomerLabel);
        searchCustomerLabel.setBounds(330, 270, 160, 30);
        getContentPane().add(searchLabel);
        searchLabel.setBounds(90, 250, 100, 40);

        deleteCustomerButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteCustomerButton.setText("Διαγραφή");
        deleteCustomerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deleteCustomerButtonMouseReleased(evt);
            }
        });
        getContentPane().add(deleteCustomerButton);
        deleteCustomerButton.setBounds(80, 220, 130, 23);

        setCustomerCreditButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        setCustomerCreditButton.setText("Πίστωση Χρέους");
        setCustomerCreditButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                setCustomerCreditButtonMouseReleased(evt);
            }
        });
        getContentPane().add(setCustomerCreditButton);
        setCustomerCreditButton.setBounds(510, 270, 140, 23);

        getCustomerDeptAnalyticalButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getCustomerDeptAnalyticalButton.setText("Ανάλυση Οφειλών Έτους");
        getCustomerDeptAnalyticalButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                getCustomerDeptAnalyticalButtonMouseReleased(evt);
            }
        });
        getContentPane().add(getCustomerDeptAnalyticalButton);
        getCustomerDeptAnalyticalButton.setBounds(40, 320, 310, 30);

        backArrowLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backArrowLabelMouseReleased(evt);
            }
        });
        getContentPane().add(backArrowLabel);
        backArrowLabel.setBounds(520, 130, 110, 30);

        getCustomerDeptByYearButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getCustomerDeptByYearButton.setText("Ανάλυση Οφειλών ανά έτος");
        getCustomerDeptByYearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                getCustomerDeptByYearButtonMouseReleased(evt);
            }
        });
        getContentPane().add(getCustomerDeptByYearButton);
        getCustomerDeptByYearButton.setBounds(410, 370, 230, 30);

        upsertCustomerDebtButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        upsertCustomerDebtButton.setText("Καταχώρηση νέου Χρέους");
        upsertCustomerDebtButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                upsertCustomerDebtButtonMouseReleased(evt);
            }
        });
        getContentPane().add(upsertCustomerDebtButton);
        upsertCustomerDebtButton.setBounds(240, 420, 310, 40);

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Όνομα", "Επώνυμο", "Σταθερό", "Κινητό" }));
        filterComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterComboBoxItemStateChanged(evt);
            }
        });
        getContentPane().add(filterComboBox);
        filterComboBox.setBounds(650, 320, 90, 20);

        loadingBar.setBackground(new java.awt.Color(255, 255, 255));
        loadingBar.setBorderPainted(false);
        loadingBar.setStringPainted(true);
        getContentPane().add(loadingBar);
        loadingBar.setBounds(20, 0, 200, 30);

        loadingBarLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(loadingBarLabel);
        loadingBarLabel.setBounds(500, 20, 120, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        getContentPane().setBackground(Color.GRAY);
        searchLabel.setVisible(false);
        backArrowLabel.setVisible(false);
        searchCustomerLabel.setVisible(false);
        searchCustomerText.setVisible(false);
        customerDataScrollPane.setVisible(false);
        changeCustomerDataButton.setVisible(false);
        deleteCustomerButton.setVisible(false);
        setCustomerCreditButton.setVisible(false);
        getCustomerDeptAnalyticalButton.setVisible(false);
        getCustomerDeptByYearButton.setVisible(false);
        filterComboBox.setVisible(false);
        loadingBarLabel.setVisible(false);
        loadingBar.setVisible(false);
        upsertCustomerDebtButton.setVisible(false);
        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //Do your Stuff here
            }
        });

        timer.start();
        timer.stop();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int w = (int) screenSize.getWidth();
        int h = (int) screenSize.getHeight();
        setSize(w, h * 92 / 100);
        setLocationRelativeTo(null);
        BufferedImage img = null;
        URL urlToImage = getClass().getResource("/img/search.png");
        try {
            img = ImageIO.read(urlToImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Image dimg = img.getScaledInstance(w * 7 / 100, h * 12 / 100, Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(dimg);
        searchLabel.setIcon(imageIcon);
        searchLabel.setLocation(w * 16 / 100, 0);
        searchLabel.setSize(w * 10 / 100, h * 15 / 100);
        img = null;
        urlToImage = getClass().getResource("/img/backArrow.png");
        try {
            img = ImageIO.read(urlToImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
        dimg = img.getScaledInstance(w * 4 / 100, h * 2 / 100, Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(dimg);
        backArrowLabel.setIcon(imageIcon);
        backArrowLabel.setLocation(w * 3 / 100, h * 3 / 100);
        backArrowLabel.setSize(w * 4 / 100, h * 2 / 100);
        Font currentFont = searchCustomerLabel.getFont();
        loadingBarLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 1.2F / 100));
        loadingBarLabel.setSize(w, h * 5 / 100);
        loadingBarLabel.setLocation(w * 30 / 100, 0);
        loadingBar.setLocation(w * 26 / 100, h * 5 / 100);
        loadingBar.setSize(w * 10 / 100, h * 4 / 100);
        searchCustomerLabel.setFont(currentFont.deriveFont(Font.BOLD, w * 1.2F / 100));
        searchCustomerLabel.setSize(w, h * 5 / 100);
        searchCustomerLabel.setLocation(w * 4 / 100, h * 14 / 100);
        searchCustomerText.setLocation(w * 13 / 100, h * 15 / 100);
        searchCustomerText.setSize(w * 12 / 100, h * 3 / 100);
        searchCustomerText.setFont(currentFont.deriveFont(Font.PLAIN, w * 1.2F / 100));
        filterComboBox.setLocation(w * 26 / 100, h * 15 / 100);
        filterComboBox.setSize(w * 10 / 100, h * 3 / 100);
        tableModel = (DefaultTableModel) customerDataTable.getModel();
        tableModel.addColumn("Επώνυμο");
        tableModel.addColumn("Όνομα");
        tableModel.addColumn("Σταθερό");
        tableModel.addColumn("Κινητό");
        tableModel.addColumn("Συνολικό Χρέος");
        tableModel.addColumn("Έτος");
        customerDataTable.setRowHeight(h * 5 / 100);
        customerDataTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 18));
        customerDataTable.setShowGrid(true);
        customerDataScrollPane.setLocation(w * 1 / 100, h * 24 / 100);
        customerDataScrollPane.setSize(w * 98 / 100, h * 63 / 100);
        for (CustomerModel item : model) {
            row = new Vector();
            row.add(item.customerSurname);
            row.add(item.customerName);
            row.add(item.customerHomePhone);
            row.add(item.customerMobilePhone);
            row.add(numberFormatter.format(item.customerDebt));
            row.add(item.currentYear);
            tableModel.addRow(row);
        }
        changeCustomerDataButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        changeCustomerDataButton.setSize(w * 19 / 100, h * 7 / 100);
        changeCustomerDataButton.setLocation(w * 38 / 100, h * 2 / 100);
        deleteCustomerButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        deleteCustomerButton.setSize(w * 19 / 100, h * 7 / 100);
        deleteCustomerButton.setLocation(w * 59 / 100, h * 2 / 100);
        upsertCustomerDebtButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        upsertCustomerDebtButton.setSize(w * 19 / 100, h * 7 / 100);
        upsertCustomerDebtButton.setLocation(w * 80 / 100, h * 2 / 100);
        setCustomerCreditButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        setCustomerCreditButton.setSize(w * 19 / 100, h * 7 / 100);
        setCustomerCreditButton.setLocation(w * 38 / 100, h * 12 / 100);
        getCustomerDeptAnalyticalButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        getCustomerDeptAnalyticalButton.setText(getCustomerDeptAnalyticalButton.getText() + " " + Calendar.getInstance().get(Calendar.YEAR));
        getCustomerDeptAnalyticalButton.setSize(w * 19 / 100, h * 7 / 100);
        getCustomerDeptAnalyticalButton.setLocation(w * 59 / 100, h * 12 / 100);
        getCustomerDeptByYearButton.setFont(currentFont.deriveFont(Font.BOLD, w * 1 / 100));
        getCustomerDeptByYearButton.setSize(w * 19 / 100, h * 7 / 100);
        getCustomerDeptByYearButton.setLocation(w * 80 / 100, h * 12 / 100);
        searchLabel.setVisible(true);
        backArrowLabel.setVisible(true);
        searchCustomerLabel.setVisible(true);
        searchCustomerText.setVisible(true);
        customerDataScrollPane.setVisible(true);
        changeCustomerDataButton.setVisible(true);
        deleteCustomerButton.setVisible(true);
        setCustomerCreditButton.setVisible(true);
        getCustomerDeptAnalyticalButton.setVisible(true);
        getCustomerDeptByYearButton.setVisible(true);
        filterComboBox.setVisible(true);
        upsertCustomerDebtButton.setVisible(true);
    }//GEN-LAST:event_formWindowOpened

    private void searchCustomerTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerTextKeyReleased
        if (timer.isRunning()) {
            timer.stop();
            robot.keyRelease(KeyEvent.VK_CONTROL);
        }
        tableModel.setRowCount(0);
        searchModel = new ArrayList<CustomerModel>();
        if (filterComboBox.getSelectedIndex() == 0) {
            for (CustomerModel item : model) {
                if (item.customerName.toLowerCase().startsWith(searchCustomerText.getText().toLowerCase())) {
                    CustomerModel temp = new CustomerModel();
                    row = new Vector();
                    row.add(item.customerSurname);
                    row.add(item.customerName);
                    row.add(item.customerHomePhone);
                    row.add(item.customerMobilePhone);
                    row.add(numberFormatter.format(item.customerDebt));
                    row.add(item.currentYear);
                    tableModel.addRow(row);
                    temp.id = item.id;
                    temp.customerName = item.customerName;
                    temp.customerSurname = item.customerSurname;
                    temp.customerHomePhone = item.customerHomePhone;
                    temp.customerMobilePhone = item.customerMobilePhone;
                    temp.customerDebt = item.customerDebt;
                    temp.currentYear = item.currentYear;
                    searchModel.add(temp);
                }
            }
        } else if (filterComboBox.getSelectedIndex() == 1) {
            for (CustomerModel item : model) {
                if (item.customerSurname.toLowerCase().startsWith(searchCustomerText.getText().toLowerCase())) {
                    CustomerModel temp = new CustomerModel();
                    row = new Vector();
                    row.add(item.customerSurname);
                    row.add(item.customerName);
                    row.add(item.customerHomePhone);
                    row.add(item.customerMobilePhone);
                    row.add(numberFormatter.format(item.customerDebt));
                    row.add(item.currentYear);
                    tableModel.addRow(row);
                    temp.id = item.id;
                    temp.customerName = item.customerName;
                    temp.customerSurname = item.customerSurname;
                    temp.customerHomePhone = item.customerHomePhone;
                    temp.customerMobilePhone = item.customerMobilePhone;
                    temp.customerDebt = item.customerDebt;
                    temp.currentYear = item.currentYear;
                    searchModel.add(temp);
                }
            }
        } else if (filterComboBox.getSelectedIndex() == 2) {
            for (CustomerModel item : model) {
                if (item.customerHomePhone.startsWith(searchCustomerText.getText())) {
                    CustomerModel temp = new CustomerModel();
                    row = new Vector();
                    row.add(item.customerSurname);
                    row.add(item.customerName);
                    row.add(item.customerHomePhone);
                    row.add(item.customerMobilePhone);
                    row.add(numberFormatter.format(item.customerDebt));
                    row.add(item.currentYear);
                    tableModel.addRow(row);
                    temp.id = item.id;
                    temp.customerName = item.customerName;
                    temp.customerSurname = item.customerSurname;
                    temp.customerHomePhone = item.customerHomePhone;
                    temp.customerMobilePhone = item.customerMobilePhone;
                    temp.customerDebt = item.customerDebt;
                    temp.currentYear = item.currentYear;
                    searchModel.add(temp);
                }
            }
        } else {
            for (CustomerModel item : model) {
                if (item.customerMobilePhone.startsWith(searchCustomerText.getText())) {
                    CustomerModel temp = new CustomerModel();
                    row = new Vector();
                    row.add(item.customerSurname);
                    row.add(item.customerName);
                    row.add(item.customerHomePhone);
                    row.add(item.customerMobilePhone);
                    row.add(numberFormatter.format(item.customerDebt));
                    row.add(item.currentYear);
                    tableModel.addRow(row);
                    temp.id = item.id;
                    temp.customerName = item.customerName;
                    temp.customerSurname = item.customerSurname;
                    temp.customerHomePhone = item.customerHomePhone;
                    temp.customerMobilePhone = item.customerMobilePhone;
                    temp.customerDebt = item.customerDebt;
                    temp.currentYear = item.currentYear;
                    searchModel.add(temp);
                }
            }
        }
    }//GEN-LAST:event_searchCustomerTextKeyReleased

    private void changeCustomerDataButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeCustomerDataButtonMouseReleased
        if (changeCustomerDataButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε μόνο έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CustomerModel modelToUpdate;
                modelToUpdate = searchModel.get(customerDataTable.getSelectedRow());
                new UpsertCustomerData("update", modelToUpdate, model).setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_changeCustomerDataButtonMouseReleased

    private void deleteCustomerButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCustomerButtonMouseReleased
        if (deleteCustomerButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε τουλάχιστον έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "Είστε σίγουρος πως θέλετε να πραγματοποιήσετε διαγραφή?", "Επιβεβαίωση", dialogButton);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    searchCustomerText.setEnabled(false);
                    customerDataTable.setEnabled(false);
                    changeCustomerDataButton.setEnabled(false);
                    deleteCustomerButton.setEnabled(false);
                    setCustomerCreditButton.setEnabled(false);
                    getCustomerDeptAnalyticalButton.setEnabled(false);
                    getCustomerDeptByYearButton.setEnabled(false);
                    filterComboBox.setEnabled(false);
                    loadingBarLabel.setVisible(true);
                    loadingBar.setVisible(true);
                    upsertCustomerDebtButton.setEnabled(false);
                    progressBarTask = new SearchCustomer.ProgressBarTask();
                    progressBarTask.addPropertyChangeListener(this);
                    progressBarTask.execute();

                }
            }
        }
    }//GEN-LAST:event_deleteCustomerButtonMouseReleased

    private void setCustomerCreditButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setCustomerCreditButtonMouseReleased
        if (setCustomerCreditButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε μόνο έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CustomerModel temp = searchModel.get(customerDataTable.getSelectedRow());
                if (temp.customerDebt == 0.0) {
                    JOptionPane.showMessageDialog(this,
                            "To χρέος για τον πελάτη έχει εξοφληθεί!",
                            "Σφάλμα",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    new UpdateCustomerCurrentDebt(temp, model).setVisible(true);
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_setCustomerCreditButtonMouseReleased

    private void getCustomerDeptAnalyticalButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getCustomerDeptAnalyticalButtonMouseReleased
        if (getCustomerDeptAnalyticalButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε μόνο έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CustomerModel customerModel = searchModel.get(customerDataTable.getSelectedRow());
                new CustomerDebtAnalytical(model, customerModel).setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_getCustomerDeptAnalyticalButtonMouseReleased

    private void getCustomerDeptByYearButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getCustomerDeptByYearButtonMouseReleased
        if (getCustomerDeptByYearButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε μόνο έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CustomerModel customerModel = searchModel.get(customerDataTable.getSelectedRow());
                new CustomerDebtByYear(model, customerModel).setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_getCustomerDeptByYearButtonMouseReleased

    private void upsertCustomerDebtButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upsertCustomerDebtButtonMouseReleased
        if (upsertCustomerDebtButton.isEnabled()) {
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            if (customerDataTable.getSelectedRowCount() != 1) {
                JOptionPane.showMessageDialog(this,
                        "Πρέπει να επιλέξετε μόνο έναν πελάτη!",
                        "Σφάλμα",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                CustomerModel temp = searchModel.get(customerDataTable.getSelectedRow());
                String upsert = "";
                if (temp.currentYear == Calendar.getInstance().get(Calendar.YEAR)) {
                    upsert = "update";
                } else {
                    upsert = "insert";
                }
                new UpsertCustomerNewDebt(upsert, model, temp).setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_upsertCustomerDebtButtonMouseReleased

    private void customerDataTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerDataTableMouseEntered
        if (!timer.isRunning()) {
            timer = new Timer(200, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    try {
                        robot = new Robot();
                        robot.keyPress(KeyEvent.VK_CONTROL);
                    } catch (AWTException ex) {
                        Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            timer.start();
        }
    }//GEN-LAST:event_customerDataTableMouseEntered

    private void customerDataTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerDataTableMouseExited
        if (timer.isRunning()) {
            timer.stop();
            robot.keyRelease(KeyEvent.VK_CONTROL);
        }
    }//GEN-LAST:event_customerDataTableMouseExited

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        if (timer.isRunning()) {
            timer.stop();
            robot.keyRelease(KeyEvent.VK_CONTROL);
        }
    }//GEN-LAST:event_formWindowIconified

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (timer.isRunning()) {
            timer.stop();
            robot.keyRelease(KeyEvent.VK_CONTROL);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        if (timer.isRunning()) {
            timer.stop();
            robot.keyRelease(KeyEvent.VK_CONTROL);
        }
    }//GEN-LAST:event_formWindowLostFocus

    private void filterComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.DESELECTED) {
            searchCustomerTextKeyReleased(null);
        }
    }//GEN-LAST:event_filterComboBoxItemStateChanged

    private void backArrowLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backArrowLabelMouseReleased
        if (searchCustomerText.isEnabled()) {
            if (backArrowLabel.isEnabled()) {
                if (timer.isRunning()) {
                    timer.stop();
                    robot.keyRelease(KeyEvent.VK_CONTROL);
                }
                new Menu(model).setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_backArrowLabelMouseReleased

    class ProgressBarTask extends SwingWorker<Void, Void> {

        @Override
        public Void doInBackground() throws ClassNotFoundException, SQLException, IOException {
            startDelete();
            return null;
        }

        /*
     * Executed in event dispatching thread
         */
        @Override
        public void done() {

        }
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            loadingBar.setValue(progress);
        }
    }

    public void startDelete() throws ClassNotFoundException, SQLException, IOException {
        File tmp = new File("temp/temp.txt");
        ArrayList<Long> id;
        int idUpdate = 1;
        int i;
        String fileString, finalString;
        DBExecution dbExecution = new DBExecution();
        int[] selectedRows = customerDataTable.getSelectedRows();
        double progress = 0.0;
        double tempProgress = (100 / (double) (selectedRows.length));
        String format = String.format("%f", tempProgress);
        tempProgress = Double.parseDouble(format.replace(",", "."));
        loadingBarLabel.setText("1/2");
        this.setDefaultCloseOperation(0);
        loadingBar.setValue(0);
        for (i = 0; i < selectedRows.length; i++) {
            CustomerModel modelToRemove;
            modelToRemove = searchModel.get(selectedRows[i]);
            ((DefaultTableModel) customerDataTable.getModel()).removeRow(selectedRows[i] - i);
            try {
                dbExecution.UpsertOrDelete("delete from customersDebtByYear where id = " + modelToRemove.id);
                dbExecution.UpsertOrDelete("delete from customersDebtAnalytical where id = " + modelToRemove.id);
                dbExecution.UpsertOrDelete("delete from customers where id = " + modelToRemove.id);
                fileString = FileUtils.readFileToString(tmp);
                finalString = fileString.replaceAll(String.valueOf("\\b" + modelToRemove.id + "\\b"), "");
                FileUtils.writeStringToFile(tmp, finalString);
                progress = progress + tempProgress;
                loadingBar.setValue((int) progress);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(SearchCustomer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (progress < 100) {
            loadingBar.setValue(100);
            fileString = FileUtils.readFileToString(tmp);
            finalString = fileString.replaceAll("\n", "");
            FileUtils.writeStringToFile(tmp, finalString);
        }
        try {
            FileUtils.write(tmp, "Delete Completed!");
            loadingBarLabel.setText("2/2");
            loadingBar.setValue(0);
            id = dbExecution.SelectCustomersId("select id from customers order by id");
            if (id.size() != 0) {
                progress = 0.0;
                tempProgress = (100 / (double) (id.size()));
                format = String.format("%f", tempProgress);
                tempProgress = Double.parseDouble(format.replace(",", "."));
                for (i = 0; i < id.size(); i++) {
                    if (id.get(i) != idUpdate) {
                        dbExecution.UpsertOrDelete("update customersDebtAnalytical set id = " + idUpdate + " where id = " + id.get(i));
                        dbExecution.UpsertOrDelete("update customersDebtByYear set id = " + idUpdate + " where id = " + id.get(i));
                        dbExecution.UpsertOrDelete("update customers set id = " + idUpdate + " where id = " + id.get(i));
                    }
                    progress = progress + tempProgress;
                    loadingBar.setValue((int) progress);
                    idUpdate++;
                }
                if (progress < 100) {
                    loadingBar.setValue(100);
                }
            } else {
                loadingBar.setValue(100);
            }
            model.clear();
            model = dbExecution.SelectCustomersData("select *from customers order by id");
            searchCustomerTextKeyReleased(null);
            FileUtils.write(tmp, "");
            JOptionPane.showMessageDialog(this,
                    "Η διαγραφή έγινε με επιτυχία!");
            this.setDefaultCloseOperation(EXIT_ON_CLOSE);
            if (timer.isRunning()) {
                timer.stop();
                robot.keyRelease(KeyEvent.VK_CONTROL);
            }
            searchCustomerText.setEnabled(true);
            customerDataTable.setEnabled(true);
            changeCustomerDataButton.setEnabled(true);
            deleteCustomerButton.setEnabled(true);
            setCustomerCreditButton.setEnabled(true);
            getCustomerDeptAnalyticalButton.setEnabled(true);
            getCustomerDeptByYearButton.setEnabled(true);
            filterComboBox.setEnabled(true);
            loadingBarLabel.setVisible(false);
            loadingBar.setVisible(false);
            upsertCustomerDebtButton.setEnabled(true);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,
                    "Η διαγραφή απέτυχε!",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
            this.setDefaultCloseOperation(EXIT_ON_CLOSE);
            searchCustomerText.setEnabled(true);
            customerDataTable.setEnabled(true);
            changeCustomerDataButton.setEnabled(true);
            deleteCustomerButton.setEnabled(true);
            setCustomerCreditButton.setEnabled(true);
            getCustomerDeptAnalyticalButton.setEnabled(true);
            getCustomerDeptByYearButton.setEnabled(true);
            filterComboBox.setEnabled(true);
            loadingBarLabel.setVisible(false);
            loadingBar.setVisible(false);
            upsertCustomerDebtButton.setEnabled(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Η διαγραφή απέτυχε!",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
            this.setDefaultCloseOperation(EXIT_ON_CLOSE);
            searchCustomerText.setEnabled(true);
            customerDataTable.setEnabled(true);
            changeCustomerDataButton.setEnabled(true);
            deleteCustomerButton.setEnabled(true);
            setCustomerCreditButton.setEnabled(true);
            getCustomerDeptAnalyticalButton.setEnabled(true);
            getCustomerDeptByYearButton.setEnabled(true);
            filterComboBox.setEnabled(true);
            loadingBarLabel.setVisible(false);
            loadingBar.setVisible(false);
            upsertCustomerDebtButton.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchCustomer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchCustomer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchCustomer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchCustomer.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SearchCustomer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backArrowLabel;
    private javax.swing.JButton changeCustomerDataButton;
    private javax.swing.JScrollPane customerDataScrollPane;
    private javax.swing.JTable customerDataTable;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JButton getCustomerDeptAnalyticalButton;
    private javax.swing.JButton getCustomerDeptByYearButton;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JLabel loadingBarLabel;
    private javax.swing.JLabel searchCustomerLabel;
    private javax.swing.JTextField searchCustomerText;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JButton setCustomerCreditButton;
    private javax.swing.JButton upsertCustomerDebtButton;
    // End of variables declaration//GEN-END:variables
}
